import matplotlib.pyplot as plt
plt.style.use('ggplot')
%matplotlib inline

import numpy as np
import seaborn as sns
import pandas as pd
plt.rcParams['figure.figsize'] = (12,8)

data = pd.read_csv('bike_sharing_data.txt')
data.head()
data.info()

ax = sns.scatterplot(x='Population', y='Profit', data=data)
ax.set_title('Profits in $10000s vs City Populations in 10000s')

def cost_function(X,y,theta):
    m = len(y)
    y_pred = X.dot(theta)
    error = (y_pred - y) ** 2
    
    return 1/(2*m) * np.sum(error)
    
m = data['Population'].values.size
X = np.append(np.ones((m,1)),data.Population.values.reshape(m,1),axis=1)
y = data['Profit'].values.reshape(m,1)
theta = np.zeros((2,1))

def gradient_descent(X,y,theta,alpha,iterations):
    m = len(y)
    costs = []
    for i in range(iterations):
        y_pred = X.dot(theta)
        error = np.dot(X.transpose(),(y_pred-y))
        theta -= alpha * 1/m * error
        costs.append(cost_function(X,y,theta))
    return theta, costs
    
theta , costs = gradient_descent(X ,y ,theta ,alpha = 0.01, iterations = 1000)
print('h(x) = {} + {}x1'.format(str(round(theta[0,0],2)),str(round(theta[1,0],2)))) #theta[0,0] gives intercept term, theta[1,0] gives model coefficient value

from mpl_toolkits.mplot3d import Axes3D #provides some basic 3d plotting
